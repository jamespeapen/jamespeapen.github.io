[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I’m a 5th-year PhD student in the Shen lab at Van Andel Institute. I work on developing tools to study DNA methylation and chromatin architecture in Fallopian tube."
  },
  {
    "objectID": "posts/vimmy/index.html",
    "href": "posts/vimmy/index.html",
    "title": "vimmy",
    "section": "",
    "text": "Once you learn vim and develop muscle memory for its key bindings, its quite hard to go back to a text editor without them. Emulators in other text editors don’t generally implement enough of vim’s functionality for a smooth transition and using them can be a little jarring after spending hours in a vim buffer, especially if you’ve got a specialized configuration.\nI use firenvim for my browser to get a neovim buffer and some plugins in any text box. This is nice when I have to use a browser for email, Github, and Slack/Teams. However, when I need to write with other people, writing a response to reviewers after peer-review for example, I find myself forced to use Word online which does not use a standard text-input box for text entry. Word online is particularly frustrating because, for reasons I don’t understand, it loses text after I type. I could write a whole paragraph and hit retrun only to lose all but the first few words I wrote.\nMy solution, partially inspired by tools like that bring a vim buffer where you are, was to launch a temporary vim buffer, write in it, and when I save and close the buffer, the vim and its container terminal window close and what I just wrote is typed into the vim-unfriendly buffer that I just had to deal with.\nThe first problem was an extra newline getting added when catting the file. I found a solution using perl that ‘chomps’ the final newline to remove it. Then the issue was getting it into the original editor. I tried to paste it but couldn’t find a way to programmatically paste with xclip since xclip -o calls only paste into the calling terminal window. So I turned to xdotool to type it out. This worked but lost all newlines. I then figured out how to preserve newlines by translating the linefeed (LF) \\n character to the carriage return (CR) \\r character. https://unix.stackexchange.com/questions/399403/xdotools-type-mangles-carriage-returns\n#! /usr/bin/env zsh\n\nkitty --class flykitty \\\nnvim \\\n  -c 'set laststatus=0' \\\n  -c 'set spell' \\\n  -c 'source ~/.config/nvim/vim/autocorrect.vim' /tmp/temp_buffer\n\nperl -pe 'chomp if eof' /tmp/temp_buffer |\\\n  tr \\\\n \\\\r |\\\n  xdotool type --delay 0.5 -file -\nthe window has the ‘flykitty’ class because my i3 settings float every window of class ‘flykitty’ instead of tiling it\nThis script launches neovim in a kitty window with spell check and autocorrect, but without a status bar. Once saved, kitty exits and the output file is processed and typed out wherever my cursor focus was before launching the script."
  },
  {
    "objectID": "software.html",
    "href": "software.html",
    "title": "Software",
    "section": "",
    "text": "An R package to analyse Seahorse data.\n    \n\n\n\nAn R package to query and summarize BED files fast\n\n\n\n\nAn R package to infer chromatin compartments from scRNA/scATAC data."
  },
  {
    "objectID": "software.html#r",
    "href": "software.html#r",
    "title": "Software",
    "section": "",
    "text": "An R package to analyse Seahorse data.\n    \n\n\n\nAn R package to query and summarize BED files fast\n\n\n\n\nAn R package to infer chromatin compartments from scRNA/scATAC data."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "vimmy\n\n\nWill type outside vim so you don’t have to\n\n\n\ndotfiles\n\ncli\n\nvim\n\n\n\n\n\n\n\n\n\nJul 5, 2025\n\n\nJames Eapen\n\n\n\n\n\nNo matching items"
  }
]